---
import { formatDistance } from "date-fns/formatDistance";

import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { InfoLabel } from "../components/ui/infoLabel";

import { CalendarIcon } from "@radix-ui/react-icons";
import { TagIcon } from "lucide-react";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { ViewTransitions } from 'astro:transitions';

import "@/styles/nav.css";

type Props = {
  children: any[];

  frontmatter?: {
    title: string;
    subTitle?: string;
    date?: string;
    modified?: string;
    tags?: string[];
    cover?: unknown;
    category?: string;
  };
};

const { title, subTitle, cover, category, date, modified, tags } =
  Astro.props.frontmatter! || Astro.props;

console.log("Main.astro", Astro.props);

const createdAgo = date ? formatDistance(new Date(date), new Date()) : "";

const modifiedAgo = modified
  ? formatDistance(new Date(modified), new Date())
  : "";
const modifiedDate = modified ? new Date(modified) : null;
// yyyy-MM-dd
const lastModified = modifiedDate
  ? modifiedDate.toISOString().split("T")[0]
  : "";
const publishedTime = date ? new Date(date).toISOString().split("T")[0] : "";
---

<html lang="en">
  <head>
    <BaseHead title={title} description={`${subTitle}`} />
    {lastModified && <meta http-equiv="last-modified" content={lastModified} />}
    {
      publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )
    }

    <style>
      main {
        width: calc(100% - 2em);
        max-width: 800px;
        line-height: 1.5;
        margin: 0 auto;
      }

      main .info {
        width: 100%;
        line-height: 1;
      }

      .icon {
        width: 1.5rem;
        height: 1.5rem;
        display: inline-block;
      }

      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 100%;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
    </style>
    <script>
      const updateCounts = () => {
        const scoreEls = document.querySelectorAll(".score");
        const scoreLabel = document.querySelector(".score label");
        const questions = document.querySelectorAll("main .challenge");
        const correct = document.querySelectorAll("main .challenge.correct");

        const isQuizPage = questions.length > 0;

        if (!isQuizPage) return; // Not a quiz page

        if (scoreEls.length >= 2)
          console.error("Multiple score elements found");
        if (!scoreLabel)
          return console.error("Expected score label, not found");

        if (questions.length === correct.length) {
          scoreLabel.innerHTML = "All correct!";
        } else {
          scoreLabel.innerHTML = `${correct.length} / ${questions.length} correct`;
        }
      };

      document.addEventListener("DOMContentLoaded", function () {
        const quiz = document.querySelector('.quiz-ui');
        
        if (quiz) {
          quiz.addEventListener('click', (e) => {
              updateCounts();
          });
        }
      });
    </script>
    <ViewTransitions />
  </head>

  <body>
    <Header date={date} modified={modified} />
    <main>
      {title && <h1>{title}</h1>}
      {subTitle && <h2>{subTitle}</h2>}
      {
        createdAgo ||
          (category && (
            <div class="info">
              <InfoLabel
                text={[
                  `created ${createdAgo} ago`,
                  `updated ${createdAgo} ago`,
                ]}
              >
                <CalendarIcon className="icon" />
              </InfoLabel>

              <InfoLabel text={category!}>
                <TagIcon className="icon" />
              </InfoLabel>
            </div>
          ))
      }

      {
        cover && typeof cover === "object" && "src" in cover && (
          <div class="hero-image">
            <Image
              src={cover as ImageMetadata}
              width="265"
              height="265"
              alt={title}
            />
          </div>
        )
      }

      <slot />
    </main>
    <Footer />
  </body>
</html>

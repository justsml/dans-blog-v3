---
import querystring from "querystring";
import { diskCache } from "../shared/diskCache";

const GITHUB_TOKEN =
  import.meta.env.VITE_GITHUB_TOKEN ||
  import.meta.env.PUBLIC_GITHUB_TOKEN ||
  import.meta.env.GITHUB_TOKEN;

export type Props = {
  path: string;
};

const { props } = Astro;

const baseUrl = "https://gist.github.com";

/**
 * @typedef {object} PluginOptions
 * @property {string} username the default gist user.
 * @property {string} secretToken the github secret access token.
 * @property {string} gistCssUrlAddress a string that represents the github default gist css url.
 * @property {boolean} truncate  reduce output size 15-35%
 * @property {boolean} includeDefaultCss flag indicating whether the github default gist css should be included
 * @property {boolean} gistDefaultCssInclude flag indicating whether the github default gist css should be included
 * @property {boolean} gistCssPreload flag indicating whether the github default gist css should be preloaded
 */

type PluginOptions = {
  username?: string;
  secretToken?: string;
  gistCssUrlAddress?: string;
  truncate?: boolean;
  includeDefaultCss?: boolean;
  gistDefaultCssInclude?: boolean;
  gistCssPreload?: boolean;
};

type GistQuery = {
  file?: string;
  highlights?: string | string[];
  lines?: string | string[];
};


/**
 * Validates the query object is valid.
 * @param {GistQuery} query the query to be validated.
 * @returns {boolean} true if the query is valid; false otherwise.
 */
function isValid(query: querystring.ParsedUrlQuery | { file: any } | null) {
  if (query == null) return false;
  if (query.file == null) {
    //  && query.highlights == null && query.lines == null
    return false;
  }

  // leaving this for future enhancements to the query object

  return true;
}

/**
 * Builds the query object.
 * This methods looks for anything that is after ? or # in the Gist Url.
 * ? is interpreted as a query string.
 * # is interpreted as a filename.
 * @param {string} value the value of the inlineCode block.
 * @returns {object} the query object.
 */
function getQuery(value: string): Record<string, any> {
  console.info("getQuery", value);
  const hash = value.includes("#");

  // this will give us
  // a) qs with length 0 - no file, no querystring
  // b) qs with length 1 - either a #file or a ?querystring
  // c) qs with length 2 - a #file and a ?querystring
  // d) qs with length > 2 - malformed
  const [, ...qs] = value.split(/[?#]/);

  // a) and d) are easy
  if (qs.length === 0) return { highlights: [], lines: [] };
  if (qs.length > 2) {
    throw new Error("Malformed query. Check your 'gist:' imports");
  }

  let query;

  // b) is tricky, could be a #file or a ?querystring
  if (qs.length === 1) {
    if (hash) {
      query = { file: qs[0] };
    } else if (qs[0].includes("=")) {
      query = querystring.parse(qs[0]);
    } else {
      throw new Error("Malformed query. Check your 'gist:' imports");
    }
  } else {
    query = { file: qs[0], ...querystring.parse(qs[1]) };
  }

  // at this point we have an object such as
  // {
  //   file?: string,
  //   highlights?: string || string[],
  //   lines?: string || string[]
  // }
  // so we validate
  if (!isValid(query)) {
    throw new Error("Malformed query. Check your 'gist:' imports");
  }

  return query;
}

/**
 * Builds the gist url.
 * @param {string} value the value of the inlineCode block.
 * @param {PluginOptions} options the options of the plugin.
 * @param {string} file the file to be loaded.
 * @returns {string} the gist url.
 */
function buildUrl(value: string, options: PluginOptions, file: null) {
  let url = `${baseUrl}/`;
  const [gist] = value.split(/[?#]/);
  const [inlineUsername, id] =
    gist.indexOf("/") > 0 ? gist.split("/") : [null, gist];
  const username = inlineUsername || options.username;
  if (username == null || username.trim().length === 0)
    throw new Error("Missing username information");
  if (id == null || id.trim().length === 0)
    throw new Error("Missing gist id information");

  url += `${username}/${id}.json`;
  if (file != null) url += `?file=${file}`;

  return url;
}

const handleError = (url: string) => (error: any) => {
  console.error(`Failed to load GitHub Gist: ${url}`, error);
  return null;
};

/**
 * Handles the markdown AST.
 * @param {path} string the markdown abstract syntax tree.
 * @param {PluginOptions} options the options of the plugin.
 * @returns {*} the markdown ast.
 */
async function loadGist(path: string, options: PluginOptions = {}) {
  // get the query string and build the url
  const query = getQuery(path);
  const url = buildUrl(path, options, query.file);

  console.log("loadGist", url);
  // call the gist and update the node type and value
  const response = await fetch(url, {
    headers: {
      Accept: "application/vnd.github+json",
      // "application/vnd.github.v3.html+json",
      Authorization: `Bearer ${GITHUB_TOKEN}`,
    },
  }).catch(handleError(url));
  const content = response ? await response.json() : {};

  // console.warn("content", content);
  // let html = content.div;
  // const truncate = Boolean(query.truncate) || Boolean(options.truncate);
  // const hasLines = query.lines.length > 0;
  // const hasHighlights = query.highlights.length > 0;

  // if (hasHighlights || hasLines) {
  //   const $ = cheerio.load(html);
  //   const file = query.file
  //     ? query.file
  //         .replace(/^\./, "")
  //         .replace(/[^a-zA-Z0-9_]+/g, "-")
  //         .toLowerCase()
  //     : "";
  //   const selectorPrefix = truncate ? "#LC" : `#file-${file}-LC`;

  //   // highlight the specify lines, if any
  //   if (hasHighlights) {
  //     query.highlights.forEach((line: any) => {
  //       $(`${selectorPrefix}${line}`).addClass("highlighted");
  //     });
  //   }

  //   // remove the specific lines, if any
  //   if (hasLines) {
  //     const codeLines = parse(`1-${$("table tr").length}`);
  //     codeLines.forEach((line: any) => {
  //       if (query.lines.includes(line)) return;

  //       $(`${selectorPrefix}${line}`).parent().remove();
  //     });
  //   }

  //   html = $.html({ decodeEntities: false, normalizeWhitespace: true });
  // }
  const level = options.truncate ? 2 : 0;

  content.div = truncateGist(content.div, level);

  return content;
}

/**
 * Shrinks size of HTML returned by the GitHub/Gist API.
 * @param {string} html input HTML
 * @param {number} [level=false] only for tests, omits attribution comment.
 * @returns {string} the mangled/truncated HTML.
 */
function truncateGist(html: string, level: 0 | 1 | 2 = 0): string {
  // DANGER: This could mangle your content!
  if (level >= 2) {
    html = replaceAll(html, /\bfile-[^\s]*-L/gim, "L");
    html = replaceAll(html, /\bblob-code\b/gm, "b-c");
    html = replaceAll(html, /\bblob-num\b/gm, "b-n");
    html = replaceAll(html, /\bblob-/gm, "b-");
    html = replaceAll(html, /\bmarkdown-body/gm, "md-b");
  }
  if (level >= 1) {
    html = replaceAll(html, /\bdata-line-number=/gm, "data-ln=");
    html = replaceAll(html, /([^\s]*)-line-number/gm, "$1-ln");
    html = replaceAll(html, /([^\s]*)-file-line/gm, "$1-fln");
  }
  // Remove whitespace at the beginning of lines
  html = replaceAll(html, /^\s+</gm, "<");
  // Remove extra blank lines
  html = replaceAll(html, /^\s+$\n/gim, "\n");
  return html;
}

const replaceAll = (str: string, pattern: RegExp, replace: string): string => {
  if (!str) throw new Error("Missing Gist data for: " + props.path);
  const result = str.replace(pattern, replace);
  if (result === str) return result;
  return replaceAll(result, pattern, replace);
};

let gist: any;
gist = await diskCache.get(props.path);
let loadedFromCache = true;
if (!gist) {
  loadedFromCache = false;
  gist = await loadGist(props.path, {
    username: "justsml",
    secretToken: GITHUB_TOKEN,
    truncate: true,
    includeDefaultCss: true,
    gistDefaultCssInclude: false,
  }).catch((error) => {
    console.error("Failed to load gist", error);
    return null;
  });
  diskCache.set(props.path, gist);
}
const stylesheetUrl = gist?.stylesheet;
---

{
  gist ? (
    <astro-embed-gist data-cssurl={stylesheetUrl}>
      <p class="gist-embed-description">{gist.description}</p>
      <Fragment set:html={gist.div} />
    </astro-embed-gist>
  ) : (
    <div
      class="gist-plugin-error"
      style={{
        backgroundColor: "#FFEBEE",
        color: "#F50000",
        padding: "4rem",
        width: "35ch",
        border: "4 dashed #F50000",
        margin: "0 auto",
      }}
    >
      <h3
        style={{
          margin: "5rem auto",
        }}
      >
        Failed to load requested Gist
      </h3>
    </div>
  )
}
<style>
  astro-embed-gist {
    display: block;
  }
  .gist-embed-owner {
  }
  .gist-embed-description {
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const gists = document.querySelectorAll("astro-embed-gist");
    gists.forEach((e) => {
      // @ts-expect-error
      console.log("adding css", gists.length, e.dataset.cssurl);
      // @ts-expect-error
      const stylesheetUrl = e.dataset.cssurl;
      const linkElement = document.createElement("link");
      linkElement.href = stylesheetUrl;
      linkElement.rel = "stylesheet";
      linkElement.type = "text/css";
      document.head.appendChild(linkElement);
    });
  });
</script>

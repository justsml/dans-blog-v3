---
import React, {
  createContext,
  useState,
  useContext,
  type ReactNode,
  type MouseEvent,
} from "react";
import { Button } from "../ui/button";

type OptionSelection = unknown; //number | null;
type Answer = { option: OptionSelection; correct: boolean };

interface ChallengeContextProps {
  selectedOption: OptionSelection | null;
  setSelectedOption: (option: OptionSelection | null) => void;
  showHintText: string;
  setShowHintText: (show: string) => void;
  showExplanation: boolean;
  setShowExplanation: (show: boolean) => void;
}

interface QuizContextProps {
  answers: Array<Answer>;
  setAnswers: React.Dispatch<React.SetStateAction<Array<Answer>>>;
  currentChallenge: number;
  setCurrentChallenge: React.Dispatch<React.SetStateAction<number>>;
}

interface ChallengeProps {
  children: ReactNode;
}

interface QuestionProps {
  children: ReactNode;
}

interface OptionsProps {
  children: ReactNode;
}

interface OptionProps {
  children: ReactNode;
  onClick?: () => void;
  answer?: boolean;
  hint?: string;
}

interface HintProps {
  children: ReactNode;
}

interface ExplainProps {
  children: ReactNode;
}

const ChallengeContext = createContext<ChallengeContextProps | undefined>(
  undefined
);
const QuizContext = createContext<QuizContextProps | undefined>(undefined);

/**
 Usage Example
 ```tsx
 <QuizUI>
  <Challenge>
    <Question>
      What is 2+2?
    </Question>
    <Options>
      <Option hint="You ok?">NaN</Option>
      <Option>3</Option>
      <Option answer={true}>4</Option>
      <Option hint="Too much...">5</Option>
    </Options>
    <Hints>
      <Hint>Think about it</Hint>
      <Hint>It's a number</Hint>
    </Hints>
    <Explanation>
      4 - 2 = 2
    </Explanation>
  </Challenge>
  <Challenge>
    <Question>
      What is the capital of France?
    </Question>
    <Options>
      <Option hint="Not quite">Berlin</Option>
      <Option answer={true}>Paris</Option>
      <Option hint="Try again">Madrid</Option>
      <Option hint="Nope">Rome</Option>
    </Options>
    <Hints>
      <Hint>It's a famous city</Hint>
      <Hint>It's known for the Eiffel Tower</Hint>
    </Hints>
  </Challenge>
</QuizUI>
```
*/
const QuizUI: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [answers, setAnswers] = useState<Array<Answer>>([]);
  const [currentChallenge, setCurrentChallenge] = useState<number>(0);

  const nextChallenge = () => {
    if (currentChallenge < React.Children.count(children) - 1) {
      setCurrentChallenge(currentChallenge + 1);
    }
  };

  const prevChallenge = () => {
    if (currentChallenge > 0) {
      setCurrentChallenge(currentChallenge - 1);
    }
  };

  return (
    <QuizContext.Provider
      value={{ answers, setAnswers, currentChallenge, setCurrentChallenge }}
    >
      <div class="quiz-ui">
        {React.Children.toArray(children)[currentChallenge]}
      </div>

      <div class="navigation">
        <Button onClick={prevChallenge} disabled={currentChallenge === 0}>
          Previous
        </Button>
        <Button
          onClick={nextChallenge}
          disabled={currentChallenge === React.Children.count(children) - 1}
        >
          Next
        </Button>
      </div>
    </QuizContext.Provider>
  );
};

const Challenge: React.FC<ChallengeProps> = ({ children }) => {
  const [selectedOption, setSelectedOption] = useState<OptionSelection | null>(
    null
  );
  const [showHintText, setShowHintText] = useState<string>("");
  const [showExplanation, setShowExplanation] = useState<boolean>(false);

  return (
    <ChallengeContext.Provider
      value={{
        selectedOption,
        setSelectedOption,
        showHintText,
        setShowHintText,
        showExplanation,
        setShowExplanation,
      }}
    >
      <div class="challenge">{children}</div>
    </ChallengeContext.Provider>
  );
};

const Question: React.FC<QuestionProps> = ({ children }) => {
  return <div class="question">{children}</div>;
};

const Options: React.FC<OptionsProps> = ({ children }) => {
  const challengeContext = useContext(ChallengeContext);
  const quizContext = useContext(QuizContext);
  if (!challengeContext || !quizContext) {
    throw new Error("Options must be used within a Challenge and QuizContext");
  }
  const { selectedOption, setSelectedOption, showHintText } = challengeContext;
  const { answers, setAnswers, currentChallenge } = quizContext;

  const handleOptionClick = (
    option: number,
    isAnswer?: boolean,
    hint?: string
  ) => {
    setSelectedOption(option);
    if (!isAnswer && hint) {
      alert(hint);
    }
    const newAnswers = [...answers];
    newAnswers[currentChallenge] = {
      option,
      correct: !!isAnswer,
    };
    setAnswers(newAnswers);
  };

  return (
    <div class="options">
      {React.Children.map(children, (child, index) => {
        if (React.isValidElement<OptionProps>(child)) {
          const { answer, hint } = child.props;
          return (
            <Button
              onClick={() => handleOptionClick(index, answer, hint)}
              class:list={["option", {selected: selectedOption === index}]}
            >
              {children}
            </Button>
          );
        }
        return null;
      })}
    </div>
  );
};

const Option: React.FC<
  OptionProps & {
    selected: boolean;
    showHintText: boolean;
  }
> = ({ children, onClick, selected, showHintText, hint }) => {
  return (
    <Button
      className={`option ${selected ? "selected" : ""}`}
      onClick={onClick}
      title={showHintText && hint ? hint : ""}
    >
      {children}
    </Button>
  );
};

const Hints: React.FC<{ children: ReactNode[] }> = ({ children }) => {
  const challengeContext = useContext(ChallengeContext);
  if (!challengeContext) {
    throw new Error("Hints must be used within a Challenge");
  }
  const { showHintText } = challengeContext;

  return (
    <div class="hints">{showHintText ? showHintText : children.length}</div>
  );
};

const Hint: React.FC<HintProps> = ({ children }) => {
  return <div class="hint">{children}</div>;
};

const Explain: React.FC<ExplainProps> = ({ children }) => {
  const challengeContext = useContext(ChallengeContext);
  if (!challengeContext) {
    throw new Error("Explain must be used within a Challenge");
  }
  const { showExplanation, setShowExplanation } = challengeContext;

  return (
    <div class="explanation">
      {showExplanation && <div>{children}</div>}
      <Button onClick={() => setShowExplanation(!showExplanation)}>
        {showExplanation ? "Hide Explanation" : "Show Explanation"}
      </Button>
    </div>
  );
};

export { Challenge, Question, Options, Option, Hints, Hint, Explain, QuizUI };
